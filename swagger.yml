openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about users and notes"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: "object"
      required:
        - username
        - password
      properties:
        username:
          type: "string"
        password:
          type: "string"
    Note:
      type: "object"
      required:
        - user_id
        - content
      properties:
        user_id:
          type: "integer"
        content:
          type: "string"
  parameters:
    username:
      name: "username"
      description: "Username of the user"
      in: path
      required: true
      schema:
        type: "string"
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: true
      schema:
        type: "integer"

security:
  - bearerAuth: []

paths:
  /users:
    get:
      operationId: "users.read_all"
      tags:
        - "Users"
      summary: "Read the list of users"
      responses:
        "200":
          description: "Successfully read users list"
  /users/register:
    post:
      operationId: "users.register"
      tags:
        - Users
      summary: "Create a new user"
      requestBody:
        description: "User to create"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Successfully created user"
  /users/login:
    post:
      summary: "Log in to get a JWT"
      operationId: "users.login"
      tags:
        - Users
      requestBody:
        description: "User credentials"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "JWT token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        "401":
          description: "Invalid credentials"
  /users/{username}:
    get:
      operationId: "users.read_one"
      tags:
        - Users
      summary: "Read one user"
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "200":
          description: "Successfully read user"
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
      operationId: "users.update"
      summary: "Update a user"
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "User data to update"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Successfully updated user"
        "403":
          description: "Unauthorized"
        "404":
          description: "User not found"
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      operationId: "users.delete"
      summary: "Delete a user"
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "204":
          description: "Successfully deleted user"
        "403":
          description: "Unauthorized"
        "404":
          description: "User not found"
      security:
        - bearerAuth: []
  /notes:
    post:
      operationId: "notes.create"
      tags:
        - Notes
      summary: "Create a note associated with a user"
      requestBody:
        description: "Note to create"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "note"
              $ref: "#/components/schemas/Note"
      responses:
        "201":
          description: "Successfully created a note"
      security:
        - bearerAuth: []
  /notes/{note_id}:
    get:
      operationId: "notes.read_one"
      tags: 
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully read one note"
      security:
        - bearerAuth: []
    put:
      tags: 
        - Notes
      operationId: "notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      requestBody:
        description: "Note data to update"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "note"
              type: object
              properties:
                content:
                  type: "string"
      responses: 
        "200":
          description: "Successfully updated note"
        "403":
          description: "Unauthorized"
        "404":
          description: "Note not found"
      security:
        - bearerAuth: []
    delete:
      tags: 
        - Notes
      operationId: "notes.delete"
      summary: "Delete a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Successfully deleted note"
        "403":
          description: "Unauthorized"
        "404":
          description: "Note not found"
      security:
        - bearerAuth: []